<?xml version="1.0" encoding="UTF-8"?>
<a2e_shader_include version="1">
	<options list="opaque alpha" />

	<vertex_shader>
		<variables>
uniform mat4 mvpm;

<option value="alpha">
uniform mat4 mvm;
out float out_depth;
centroid out vec4 out_position;
</option>

		</variables>
		<program>
void inferred_vs() {
	<option value="alpha">
	out_depth = -(mvm * vec4(in_vertex, 1.0)).z;
	out_position = mvpm * vec4(in_vertex, 1.0);
	</option>
}
		</program>
	</vertex_shader>
	
	<fragment_shader>
		<variables>
uniform sampler2D light_buffer;
uniform vec2 screen_size;

<option value="alpha">
uniform vec2 id;
uniform float mask_id;
uniform sampler2D dsf_buffer;
uniform sampler2D depth_buffer;

uniform vec2 l_buffer_size;
uniform vec2 projection_ab;
uniform vec2 texel_size;

in float out_depth;
centroid in vec4 out_position;
</option>

		</variables>
		<program>

<option value="opaque">
vec4 compute_light_color() {
	return texture(light_buffer, gl_FragCoord.xy / screen_size);
}
</option>

<option value="alpha">
vec4 compute_light_color() {
	vec2 centroid_frag_coord = ((out_position.xy/out_position.w) * 0.5) + 0.5;
	vec2 lbuffer_coord = centroid_frag_coord * l_buffer_size;
	vec2 lbuffer_coord_f = floor(lbuffer_coord);
	
	//
	const float mscale = 2.0;
	vec2 scale = l_buffer_size / screen_size;
	
	// compute the offset
	vec2 tiled_frag_coord = mod(lbuffer_coord_f, 2.0);
	float cid = tiled_frag_coord.x + tiled_frag_coord.y * 2.0;
	// since using int arithmetic and offsetting into a const mat4 apparently are too costly,
	// do some nice math magic to get the right offset (mask id down, cid across):
	// offset x:
	//		0.0, 0.0, 0.0, 0.0
	//		-1.0, 0.0, -1.0, 0.0
	//		0.0, -1.0, 0.0, -1.0
	//		-1.0, 0.0, -1.0, 0.0
	// offset y:
	//		0.0, 0.0, 0.0, 0.0
	//		0.0, 0.0, -1.0, -1.0
	//		-1.0, -1.0, 0.0, 0.0
	//		-1.0, -1.0, 0.0, 0.0
	float off_x = mask_id + cid;
	float off_y = (mask_id >= 2.0 ? 1.0 : 0.0) + (cid >= 2.0 ? 1.0 : 0.0);
	vec2 offset = -mod(vec2(off_x, off_y), 2.0); // offset for id #0 is always 0, so abuse mscale
	
	
	// compute the 4 sample coordinates
	// TODO: use cone filter
	vec2 coords[4];
	vec2 stexel_size = texel_size * mscale;
	coords[0] = (lbuffer_coord_f + 0.5 + offset) / l_buffer_size; // lower left
	coords[1] = coords[0] + vec2(stexel_size.x, 0.0); // lower right
	coords[2] = coords[0] + vec2(0.0, stexel_size.y); // upper left
	coords[3] = coords[0] + vec2(stexel_size.x, stexel_size.y); // upper right
	
	//
	vec4 light_color = vec4(0.0);
	vec4 light_vals[4];
	float valid_sample[4];
	float valid_samples = 0.0;
	const float depth_epsilon = 20.0;
	const float epsilon = 0.05; // seems to be okay for now
	for(int i = 0; i < 4; i++) {
		vec2 dsf = texture(dsf_buffer, coords[i]).rg;
		float depth = projection_ab.y / (texture(depth_buffer, coords[i]).r - projection_ab.x);
		
		vec2 dsf_diff = abs(dsf - id);
		if(abs(depth - out_depth) <= depth_epsilon &&
		   dsf_diff.x <= epsilon &&
		   dsf_diff.y <= epsilon) {
			valid_sample[i] = 1.0;
			valid_samples += 1.0;
		}
		
		light_vals[i] = texture(light_buffer, coords[i]);
	}
	//if(valid_samples == 0.0) discard;
	
	// TODO: reduction in a prev stage?
	
	// compute weights for bilinear filtering

	vec2 bilinear_weight = (fract(lbuffer_coord) - 0.5*scale - offset) / mscale;
	vec3 weights;
	valid_sample[0] += valid_sample[1];
	valid_sample[2] += valid_sample[3];
	valid_sample[1] = valid_sample[0] - valid_sample[2];
	valid_sample[1] *= 0.5;
	weights.x = clamp(bilinear_weight.x - valid_sample[0], 0.0, 1.0);
	weights.y = clamp(bilinear_weight.x - valid_sample[2], 0.0, 1.0);
	weights.z = clamp(bilinear_weight.y + valid_sample[1], 0.0, 1.0);
	
	light_color = mix(mix(light_vals[0], light_vals[1], weights.x),
					  mix(light_vals[2], light_vals[3], weights.y),
					  weights.z);
	
	if(valid_samples == 0.0) {
		// modify lighting a bit dependent on its intensity
		//light_color.rgb *= (light_color.r+light_color.g+light_color.b)/3.0;
		light_color.rgb *= (light_color.r+light_color.g+light_color.b)/2.3;
		light_color.a *= light_color.a;
		//light_color.rgb *= 0.75;
	}
	
	return light_color;
}
</option>
		</program>
	</fragment_shader>
</a2e_shader_include>
