<?xml version="1.0" encoding="UTF-8"?>
<a2e_shader version="1">
	<includes>global inferred</includes>

	<vertex_shader>
		<variables>
uniform mat4 local_mview;
uniform mat4 local_scale;
uniform vec3 cam_position;
uniform vec3 model_position;

in vec3 normal;
in vec2 texture_coord;
in vec3 binormal;
in vec3 tangent;

out vec2 out_tex_coord;
out vec3 out_view_vec;
		</variables>
		<program>
void main() {
	mat4 transform_mat = local_scale * local_mview;
	
	out_tex_coord = texture_coord;
	
	vec3 tvertex = vec3(transform_mat * vec4(in_vertex, 1.0));
	vec3 vview = cam_position - model_position - tvertex;
	
	vec3 vv_tangent = mat3(transform_mat) * tangent;
	vec3 vv_binormal = mat3(transform_mat) * binormal;
	vec3 vv_normal = mat3(transform_mat) * normal;
	
	out_view_vec.x = dot(vview, vv_tangent);  // s tangent
	out_view_vec.y = dot(vview, vv_binormal); // t tangent
	out_view_vec.z = dot(vview, vv_normal);   // normal
	
	inferred_vs();
	
	gl_Position = mvpm * vec4(in_vertex, 1.0);
}
		</program>
	</vertex_shader>
	
	<fragment_shader>
		<variables>
uniform sampler2D diffuse_texture;
uniform sampler2D specular_texture;
uniform sampler2D height_texture;

in vec2 out_tex_coord;
in vec3 out_view_vec;
		</variables>
		<program>
void main() {
	vec4 light_color = compute_light_color();
	
	//
	vec3 view_vec = normalize(out_view_vec);
	
	// determines the "deepness"
	const float parallax = 0.03;
	
	// compute parallax tex coord
	float height = 0.0;
	float offset = 0.0;
	vec2 parallax_tex_coord = out_tex_coord;
	for(int i = 1; i < 4; i++) {
		height += texture(height_texture, parallax_tex_coord).x;
		offset = parallax * ((2.0 / float(i)) * height - 1.0);
		parallax_tex_coord = out_tex_coord + offset * view_vec.xy;
	}
	
	vec4 diff_color = texture(diffuse_texture, parallax_tex_coord);
	vec4 spec_color = texture(specular_texture, parallax_tex_coord);
	
	////////////////////////////////////////////////////////////////////////////
	// lighting
	vec3 final_color = light_color.rgb * diff_color.rgb + light_color.a * spec_color.rgb;
	
	frag_color = vec4(final_color * diff_color.a, diff_color.a);
}
		</program>
	</fragment_shader>
	
</a2e_shader>